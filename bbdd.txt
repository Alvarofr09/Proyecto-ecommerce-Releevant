DROP TABLE IF EXISTS Usuarios, Productos, Categorias, Pedidos, Detalles_pedido, Favoritos, Carrito;
DROP TYPE IF EXISTS Direccion, order_state;


CREATE TYPE Direccion AS (
    calle VARCHAR(255),
    ciudad VARCHAR(100),
    pais VARCHAR(50),
    codigo_postal VARCHAR(10)
);

CREATE TABLE Usuarios (
    ID_usuario SERIAL PRIMARY KEY,
    Nombre_usuario VARCHAR(50) NOT NULL,
    Correo_electronico VARCHAR(100) UNIQUE NOT NULL,
    Contrase√±a VARCHAR(255) NOT NULL,
    Direccion Direccion,
    Informacion_pago VARCHAR(255)
);

CREATE TABLE Categorias (
    ID_categoria SERIAL PRIMARY KEY,
    Nombre_categoria VARCHAR(50) NOT NULL
);

CREATE TABLE Productos (
    ID_producto SERIAL PRIMARY KEY,
    Nombre_producto VARCHAR(100) NOT NULL,
    Descripcion TEXT,
    Precio DECIMAL(10, 2) NOT NULL,
    Stock INT NOT NULL,
    Puntuacion DECIMAL(3, 1),
    on_stock boolean,
    categoria_id INT,
    FOREIGN KEY (categoria_id) REFERENCES Categorias(ID_categoria),
    Imagen_producto VARCHAR(255)
);

CREATE TYPE order_state AS ENUM ('Cart', 'Created', 'Processing', 'Canceled',
'Complete');

CREATE TABLE Pedidos (
    ID_pedido SERIAL PRIMARY KEY,
    usuario_id INT,
    total_price DECIMAL(9,2),
    Fecha_pedido Date,
    Estado_pedido order_state,
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(ID_usuario)
);

CREATE TABLE Detalles_pedido (
    ID_detalle_pedido SERIAL PRIMARY KEY,
    pedido_id INT,
    producto_id INT,
    Cantidad INT NOT NULL,
    subtotal DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (pedido_id) REFERENCES Pedidos(ID_pedido),
    FOREIGN KEY (producto_id) REFERENCES Productos(ID_producto)
);

CREATE TABLE Favoritos (
    ID_favorito SERIAL PRIMARY KEY,
    usuario_id INT,
    producto_id INT,
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(ID_usuario),
    FOREIGN KEY (producto_id) REFERENCES Productos(ID_producto),
    UNIQUE (usuario_id, producto_id)
);

CREATE TABLE Carrito (
    ID_carrito SERIAL PRIMARY KEY,
    usuario_id INT,
    producto_id INT,
    Cantidad INT NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(ID_usuario),
    FOREIGN KEY (producto_id) REFERENCES Productos(ID_producto)
);


